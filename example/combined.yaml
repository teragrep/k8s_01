apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubelogreader
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubelogreader
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubelogreader
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubelogreader
subjects:
- kind: ServiceAccount
  name: kubelogreader
---
apiVersion: v1
data:
  config.json: |
    {
      "metrics": {
        "port": 12345
      },
      "kubernetes": {
        "logdir": "/var/log/containers",
        "url": "https://127.0.0.1:8443",
        "timezone": "Europe/Helsinki",
        "cacheExpireInterval": 300,
        "cacheMaxEntries": 4096,
        "labels": {
          "hostname": {
            "prefix": "prefix-",
            "fallback": "fallback-hostname",
            "labelStdout": "host",
            "labelStderr": "host-stderr"
          },
          "appname": {
            "prefix": "prefix-",
            "fallback": "fallback-appname",
            "labelStdout": "app",
            "labelStderr":  "app-stderr"
          }
        },
        "logfiles": [
          "first-pod_default_.*",
          "second-pod_default_.*",
          "third-pod_default_third-pod-one-.*",
          "third-pod_default_third-pod-two-.*",
          "fifth-pod_default_.*"
        ]
      },
      "relp": {
        "target": "receiver.receiver.default",
        "port": 1601,
        "connectionTimeout": 5000,
        "readTimeout": 5000,
        "writeTimeout": 5000,
        "reconnectInterval": 5000,
        "outputThreads": 5
      }
    }
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration monitorInterval="30" status="error">
        <Appenders>
            <Console name="STDOUT">
                <PatternLayout pattern="%d{dd.MM.yyyy HH:mm:ss.SSS} [%level] [%logger] [%thread] %msg%ex%n" />
            </Console>
        </Appenders>
        <Loggers>
            <Logger name="com.teragrep.k8s_01" level="INFO" additivity="false">
                <AppenderRef ref="STDOUT" />
            </Logger>
            <Logger name="com.teragrep.k8s_01.KubernetesCachingAPIClient" level="INFO" additivity="false">
                <AppenderRef ref="STDOUT" />
            </Logger>
            <Logger name="com.teragrep.rlo_12" level="INFO" additivity="false">
                <AppenderRef ref="STDOUT" />
            </Logger>
            <Logger name="com.teragrep.rlo_13" level="INFO" additivity="false">
                <AppenderRef ref="STDOUT" />
            </Logger>
            <Root level="INFO">
                <AppenderRef ref="STDOUT" />
            </Root>
        </Loggers>
    </Configuration>
kind: ConfigMap
metadata:
  name: app-config-58dh7f727h
---
apiVersion: v1
data:
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="INFO">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
        </Console>
      </Appenders>
      <Loggers>
        <Root level="INFO" additivity="false">
          <AppenderRef ref="Console" />
        </Root>
        <Logger name="com.teragrep.rlp_03" level="INFO" additivity="false">
          <AppenderRef ref="Console" />
        </Logger>
      </Loggers>
    </Configuration>
kind: ConfigMap
metadata:
  name: receiver-config-cf8g6bh7tg
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: kubelogreader
  name: kubelogreader
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: Service
metadata:
  name: relp-service
  namespace: default
spec:
  ports:
  - name: relp
    port: 1601
    protocol: TCP
    targetPort: 1601
  selector:
    app: receiver
    env: dev
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: Pod
metadata:
  name: fifth-pod
  namespace: default
spec:
  containers:
  - args:
    - -c
    - echo 'I am fifth pod. I have no labels.'; sleep inf
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: fifth-pod
  dnsPolicy: ClusterFirst
  hostname: fifth-pod
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: first-pod-appname
    app-stderr: first-pod-appname-stderr
    env: dev
  name: first-pod
  namespace: default
spec:
  containers:
  - args:
    - -c
    - echo 'I am first pod'; echo 'This is an example log message'; echo 'This is
      something to stderr' >&2; sleep inf;
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: first-pod
  dnsPolicy: ClusterFirst
  hostname: first-pod
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: fourth-pod-app
    env: dev
    host: fourth-pod-hostname
  name: fourth-pod
  namespace: default
spec:
  containers:
  - args:
    - -c
    - echo 'I am fourth pod. I should not be read.'; while true; do echo 'Why are
      you reading me?'; sleep 5; done; sleep inf
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: fourth-pod
  dnsPolicy: ClusterFirst
  hostname: fourth-pod
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: k8s_01
    env: dev
    host: k8s_01
  name: kubelogreader
  namespace: default
spec:
  containers:
  - args:
    - -c
    - export K8S_01_RELP_TARGET="${RELP_SERVICE_SERVICE_HOST}"; export K8S_01_RELP_PORT="${RELP_SERVICE_SERVICE_PORT}";
      export K8S_01_KUBERNETES_URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}";
      cd /opt/teragrep/k8s_01 || exit 1; exec /usr/bin/java -Dlog4j2.configurationFile=file:etc/log4j2.xml
      -jar lib/k8s_01.jar;
    command:
    - /usr/bin/bash
    image: ghcr.io/teragrep/k8s_01/app:latest
    imagePullPolicy: IfNotPresent
    name: kubelogreader
    volumeMounts:
    - mountPath: /opt/teragrep/k8s_01/etc
      name: app-config
    - mountPath: /var/log/containers
      name: host-var-log-containers
      readOnly: true
    - mountPath: /var/log/pods
      name: host-var-log-pods
      readOnly: true
    - mountPath: /var/lib/docker/containers
      name: host-var-lib-docker-containers
      readOnly: true
    - mountPath: /opt/teragrep/k8s_01/var
      name: host-mnt-statefiles
      readOnly: false
  dnsPolicy: ClusterFirst
  hostname: kubelogreader
  imagePullSecrets:
  - name: ghcr.io
  restartPolicy: Always
  serviceAccount: kubelogreader
  serviceAccountName: kubelogreader
  terminationGracePeriodSeconds: 0
  volumes:
  - configMap:
      name: app-config-58dh7f727h
    name: app-config
  - hostPath:
      path: /var/log/containers
      type: Directory
    name: host-var-log-containers
  - hostPath:
      path: /var/log/pods
      type: Directory
    name: host-var-log-pods
  - hostPath:
      path: /var/lib/docker/containers
      type: Directory
    name: host-var-lib-docker-containers
  - hostPath:
      path: /mnt/statefiles
      type: DirectoryOrCreate
    name: host-mnt-statefiles
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: receiver
    env: dev
  name: receiver
  namespace: default
spec:
  containers:
  - args:
    - -Dlog4j.configurationFile=/config/log4j2.xml
    - -jar
    - /opt/teragrep/rlp_07/lib/rlp_07.jar
    command:
    - /usr/bin/java
    image: ghcr.io/teragrep/rlp_07/app:latest
    imagePullPolicy: IfNotPresent
    name: first-pod
    ports:
    - containerPort: 1601
      name: relp
      protocol: TCP
    volumeMounts:
    - mountPath: /config/
      name: receiver-config
  dnsPolicy: ClusterFirst
  hostname: receiver
  imagePullSecrets:
  - name: ghcr.io
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
  volumes:
  - configMap:
      name: receiver-config-cf8g6bh7tg
    name: receiver-config
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    env: dev
    host: second-pod-hostname
  name: second-pod
  namespace: default
spec:
  containers:
  - args:
    - -c
    - echo 'I am second pod'; while true; do echo "I think you are thinking of number...
      $RANDOM!"; sleep 5; done; sleep inf;
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: second-pod
  dnsPolicy: ClusterFirst
  hostname: second-pod
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: third-pod-app
    env: dev
    host: third-pod-hostname
    host-stderr: third-pod-hostname-stderr
  name: third-pod
  namespace: default
spec:
  containers:
  - args:
    - -c
    - 'echo ''I am third pod #1''; echo ''I will not print more logs'' >&2; sleep
      inf'
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: third-pod-one
  - args:
    - -c
    - 'echo ''I am third pod #2''; while true; do echo "Todays lucky number is $RANDOM
      and we keep on writing messages, slowly."; sleep 5; done; sleep inf'
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: third-pod-two
  - args:
    - -c
    - 'echo ''I am third pod #3. I should not be read''; sleep inf'
    command:
    - /usr/bin/bash
    image: rockylinux:8
    imagePullPolicy: IfNotPresent
    name: third-pod-three
  dnsPolicy: ClusterFirst
  hostname: third-pod
  restartPolicy: Always
  terminationGracePeriodSeconds: 0
